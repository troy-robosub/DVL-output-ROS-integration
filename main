#!/usr/bin/python3

import argparse
import csv
import datetime
import json
import socket
import rospy
from time import sleep
#from std_msgs.msg import String
#from waterlinked_a50_ros_driver.msg import DVL //might have to change "waterlinked_a50 ros_driver" to my new fork bc the repo is archived. 
#from waterlinked_a50_ros_driver.msg import DVLBeam
import select

#workflow: work on reading through the parser script first. Look for important functions and classes. 
#Go to publisher next and do the same. Work on making sure that all the imports and libs work. 

def _start_dvl_socket(dvl_ip):
    dvl_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    dvl_socket.connect((dvl_ip, 16171))
    return dvl_socket
# used to start DVL by starting a TCP connection to the DVL. 

class _CSVWriter:
    def __init__(self, csv_file, message_type):
        self.csv_file = csv_file
        self.csv_writer = self._csv_writer(csv_file, message_type)

    @classmethod
    def _csv_field_names(cls, message_type):
        if message_type == "velocity":
            return [
                "log_time",
                "time_of_validity",
                "time_of_transmission",
                "time",
                "vx",
                "vy",
                "vz",
                "fom",
                "altitude",
                "velocity_valid",
                "status" ]
        return [
            "log_time",
            "ts",
            "x",
            "y",
            "z",
            "std",
            "status" ]

    @classmethod
    def _csv_writer(cls, csv_file, message_type):
        csv_writer = csv.DictWriter(
            csv_file,
            fieldnames = cls._csv_field_names(message_type),
            extrasaction = "ignore",
            delimiter = ',')
        csv_writer.writeheader()
        return csv_writer

    def writerow(self, row):
        self.csv_writer.writerow(row)

    def flush(self):
        self.csv_file.flush()
